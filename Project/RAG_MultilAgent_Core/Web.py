import streamlit as st
import pandas as pd
import json
import asyncio
from pymilvus import connections, Collection, utility
import warnings
import time
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go

# Import modules
from ui.chatbot_interface import create_chatbot_interface
from ui.filter_interface import create_sidebar_filter, apply_filters_cached, create_sidebar_stats
from ui.metadata_analysis import create_metadata_tab_interface, get_metadata_fields
from data.data_processor import connect_to_milvus, parse_metadata, get_collection_info, load_collection_data_with_pagination

# Import chatbot - ƒê·∫£m b·∫£o file n√†y c√≥ trong c√πng th∆∞ m·ª•c
try:
    from chatbot import RnDChatbot
    CHATBOT_AVAILABLE = True
except ImportError:
    CHATBOT_AVAILABLE = False

warnings.filterwarnings('ignore')


# ==================== CACHING CONFIGURATION ====================

# Cache connection status ƒë·ªÉ tr√°nh k·∫øt n·ªëi l·∫°i li√™n t·ª•c
@st.cache_data(ttl=1800)  # Cache 30 ph√∫t
def get_connection_status():
    """Cache connection status ƒë·ªÉ tr√°nh ki·ªÉm tra li√™n t·ª•c"""
    try:
        return connect_to_milvus()
    except Exception as e:
        return False

# Enhanced load_collection_data with ID-based pagination - NO OFFSET LIMIT
@st.cache_data(
    ttl=7200,  # Cache 2 ti·∫øng
    max_entries=3,
    show_spinner="üîÑ ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Milvus v·ªõi ID-based pagination..."
)
def load_collection_data_cached():
    """Load d·ªØ li·ªáu t·ª´ collection v·ªõi ID-based pagination - kh√¥ng gi·ªõi h·∫°n offset"""
    try:
        # Hi·ªÉn th·ªã th√¥ng tin collection tr∆∞·ªõc khi load
        collection_info = get_collection_info()
        
        # S·ª≠ d·ª•ng ID-based pagination thay v√¨ offset-based
        raw_data = load_collection_data_with_pagination()

        if not raw_data:
            st.error("‚ö† Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ Milvus!")
            return []

        # Convert to serializable format (list of dicts)
        serializable_results = []
        for item in raw_data:
            # Convert each item to regular dict
            serializable_item = {}
            for key, value in item.items():
                # Handle different value types
                if hasattr(value, '__iter__') and not isinstance(value, (str, bytes)):
                    # Convert iterables to list
                    serializable_item[key] = list(value) if not isinstance(value, dict) else value
                else:
                    serializable_item[key] = value
            serializable_results.append(serializable_item)

        return serializable_results

    except Exception as e:
        st.error(f"‚ö† L·ªói load d·ªØ li·ªáu: {e}")
        return []


# Alternative fallback method with original logic for comparison
@st.cache_data(
    ttl=7200,
    max_entries=3,
    show_spinner="üîÑ ƒêang t·∫£i d·ªØ li·ªáu v·ªõi method d·ª± ph√≤ng..."
)
def load_collection_data_fallback():
    """Fallback method v·ªõi logic c≈© (c√≥ gi·ªõi h·∫°n offset)"""
    try:
        collection_name = "product_collection_v4"

        if not utility.has_collection(collection_name):
            st.error(f"‚ö† Collection '{collection_name}' kh√¥ng t·ªìn t·∫°i!")
            return []

        collection = Collection(collection_name)
        collection.load()

        # Query to√†n b·ªô d·ªØ li·ªáu v·ªõi gi·ªõi h·∫°n c≈©
        results = collection.query(
            expr="",  # Query t·∫•t c·∫£
            output_fields=["id_sanpham", "platform", "description", "metadata", "date", "like", "comment", "share", "name_store"],
            limit=16384  # Gi·ªõi h·∫°n max c·ªßa ph∆∞∆°ng ph√°p c≈©
        )

        # Convert to serializable format
        serializable_results = []
        for item in results:
            serializable_item = {}
            for key, value in item.items():
                if hasattr(value, '__iter__') and not isinstance(value, (str, bytes)):
                    serializable_item[key] = list(value) if not isinstance(value, dict) else value
                else:
                    serializable_item[key] = value
            serializable_results.append(serializable_item)

        return serializable_results

    except Exception as e:
        st.error(f"‚ö† L·ªói fallback load d·ªØ li·ªáu: {e}")
        return []


# Cache chatbot initialization
@st.cache_resource
def initialize_cached_chatbot():
    """Initialize chatbot v·ªõi resource caching - ch·ªâ kh·ªüi t·∫°o 1 l·∫ßn"""
    if CHATBOT_AVAILABLE:
        try:
            return RnDChatbot()
        except Exception as e:
            st.error(f"‚ö† L·ªói kh·ªüi t·∫°o chatbot: {e}")
            return None
    return None


# Cache CSS loading
@st.cache_data
def load_cached_css():
    """Cache CSS ƒë·ªÉ tr√°nh load l·∫°i m·ªói l·∫ßn"""
    css = """
    <style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 0.5rem 0;
    }
    .filter-container {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
    .chart-container {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    .metadata-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 1rem;
        margin: 1rem 0;
    }
    .metadata-item {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border: 1px solid #e0e0e0;
    }
    .stButton > button {
        width: 100%;
        margin: 2px 0;
    }
    .engagement-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }
    .product-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
        background: #f9f9f9;
    }
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)


# Cache static content
@st.cache_data
def get_header_content():
    """Cache n·ªôi dung header tƒ©nh"""
    return """
    <div class="main-header">
        <h1>üöÄ Milvus Product Analytics Dashboard</h1>
        <p>ü§ñ RnD Assistant - Chatbot ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ Milvus Vector Database</p>
        <small>‚úÖ Unlimited Data Loading - No Offset Limit</small>
    </div>
    """


# Cache static loading message
@st.cache_data
def get_loading_messages():
    """Cache c√°c th√¥ng b√°o loading"""
    return {
        'initial': "üîÑ ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Milvus v·ªõi ID-based pagination...",
        'success': "‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng v·ªõi unlimited records!",
        'waiting': "‚è≥ Vui l√≤ng ƒë·ª£i d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i...",
        'no_data': "‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã!",
        'switch_tab': "‚ö° Chuy·ªÉn ƒë·ªïi tab - kh√¥ng c·∫ßn t·∫£i l·∫°i d·ªØ li·ªáu",
        'unlimited': "üöÄ ƒêang load unlimited data - kh√¥ng gi·ªõi h·∫°n offset!"
    }


# ==================== SESSION STATE MANAGEMENT ====================

def initialize_session_state():
    """Kh·ªüi t·∫°o session state m·ªôt c√°ch t·ªëi ∆∞u"""
    # Ch·ªâ kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥
    if 'app_initialized' not in st.session_state:
        st.session_state.app_initialized = True
        st.session_state.last_connection_check = None
        st.session_state.connection_status = None

    if 'chatbot_initialized' not in st.session_state:
        st.session_state.chatbot_initialized = False
        st.session_state.chatbot = None
        st.session_state.chat_history = []
        st.session_state.chatbot_loading = False

    # Filter settings v·ªõi persistence
    if 'filter_settings' not in st.session_state:
        st.session_state.filter_settings = {}
        st.session_state.filtered_df = pd.DataFrame()
        st.session_state.filter_applied = False
        st.session_state.filter_changed = False

    # Sidebar filter state
    if 'sidebar_store' not in st.session_state:
        st.session_state.sidebar_store = 'T·∫•t c·∫£'
    if 'sidebar_platform' not in st.session_state:
        st.session_state.sidebar_platform = 'T·∫•t c·∫£'
    if 'sidebar_date_range' not in st.session_state:
        st.session_state.sidebar_date_range = None

    # Data loading state
    if 'app_data_loaded' not in st.session_state:
        st.session_state.app_data_loaded = False
        st.session_state.master_df = pd.DataFrame()

    # Current active tab persistence
    if 'active_tab' not in st.session_state:
        st.session_state.active_tab = "chatbot"

    # Metadata view mode state
    if 'metadata_view_mode' not in st.session_state:
        st.session_state.metadata_view_mode = "overview"
    if 'selected_metadata_field' not in st.session_state:
        st.session_state.selected_metadata_field = None
    if 'selected_metadata_value' not in st.session_state:
        st.session_state.selected_metadata_value = None

    # Performance tracking
    if 'page_load_count' not in st.session_state:
        st.session_state.page_load_count = 0
        st.session_state.last_activity = datetime.now()

    # Data loading method tracking
    if 'loading_method' not in st.session_state:
        st.session_state.loading_method = "id_based"  # Default to unlimited method

    st.session_state.page_load_count += 1
    st.session_state.last_activity = datetime.now()


# ==================== OPTIMIZED CHATBOT INITIALIZATION ====================

def setup_chatbot_optimized():
    """Thi·∫øt l·∫≠p chatbot v·ªõi caching t·ªëi ∆∞u"""
    if not CHATBOT_AVAILABLE:
        if st.session_state.page_load_count == 1:  # Ch·ªâ hi·ªán warning l·∫ßn ƒë·∫ßu
            st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ import chatbot. Ch·ª©c nƒÉng chatbot s·∫Ω b·ªã v√¥ hi·ªáu h√≥a.")
        return False

    # Ch·ªâ kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥ v√† kh√¥ng ƒëang loading
    if not st.session_state.chatbot_initialized and not st.session_state.chatbot_loading:
        st.session_state.chatbot_loading = True
    return st.session_state.chatbot_initialized


# ==================== MAIN APPLICATION ====================

def main():
    """Main application v·ªõi unlimited data loading"""

    # C·∫•u h√¨nh trang - ch·ªâ ch·∫°y 1 l·∫ßn
    st.set_page_config(
        page_title="Milvus Product Analytics Dashboard - Unlimited",
        page_icon="üöÄ",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # Initialize session state
    initialize_session_state()

    # Load CSS (cached)
    load_cached_css()

    # Header (cached content)
    st.markdown(get_header_content(), unsafe_allow_html=True)

    # Check connection
    if not get_connection_status():
        st.error("‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Milvus. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi!")
        return

    # Data loading v·ªõi session state caching - s·ª≠ d·ª•ng ID-based pagination
    loading_msgs = get_loading_messages()

    if 'app_data_loaded' not in st.session_state or st.session_state.app_data_loaded == False:
    
        
        with st.spinner(loading_msgs['unlimited']):
            # S·ª≠ d·ª•ng method m·ªõi v·ªõi unlimited loading
            raw_data = load_collection_data_cached()

            if not raw_data:
                st.warning("‚ö† Th·ª≠ s·ª≠ d·ª•ng method d·ª± ph√≤ng...")
                with st.spinner("üîÑ ƒêang th·ª≠ method d·ª± ph√≤ng..."):
                    raw_data = load_collection_data_fallback()
                
                if not raw_data:
                    st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ Milvus!")
                    return

            df = parse_metadata(raw_data)
            if df.empty:
                st.error("‚ùå Kh√¥ng th·ªÉ parse d·ªØ li·ªáu metadata!")
                return

            # Cache data trong session state
            st.session_state.master_df = df
            st.session_state.app_data_loaded = True

            # Show success message v·ªõi th·ªëng k√™
            success_placeholder = st.empty()
            success_placeholder.success(f"""
            ‚úÖ {loading_msgs['success']}
            
            üìä **Th·ªëng k√™ t·∫£i d·ªØ li·ªáu:**
            - T·ªïng records: {len(df):,}
            - Ph∆∞∆°ng ph√°p: ID-based pagination (unlimited)
            - Th·ªùi gian: {datetime.now().strftime('%H:%M:%S')}
            """)
            time.sleep(2)  # Brief delay to show success
            success_placeholder.empty()
    else:
        # S·ª≠ d·ª•ng data ƒë√£ cached - kh√¥ng c√≥ spinner loading
        df = st.session_state.master_df
        
        # Hi·ªÉn th·ªã th√¥ng tin data ƒë√£ load
        st.sidebar.success(f"üìä Data loaded: {len(df):,} records")

    # Sidebar filter (always visible) v·ªõi persistent state - ch·ªâ hi·ªÉn th·ªã khi c√≥ data
    if st.session_state.app_data_loaded and not st.session_state.master_df.empty:
        selected_store, selected_platform, date_range = create_sidebar_filter(df)

        # Apply filters v·ªõi caching
        filtered_df = apply_filters_cached(df, selected_store, selected_platform, date_range)
        st.session_state.filtered_df = filtered_df

        # Show stats in sidebar v·ªõi unlimited data info
        create_sidebar_stats(filtered_df)
        
        # Th√™m th√¥ng tin v·ªÅ unlimited loading
        st.sidebar.markdown("---")
        st.sidebar.success("üöÄ **Unlimited Loading Active**")
        st.sidebar.info(f"‚úÖ No offset limit\nüìà ID-based pagination\nüíæ Cached: {len(df):,} records")

        # Simple tab implementation v·ªõi session state - instant switching
        col1, col2 = st.columns(2)
        with col1:
            chatbot_clicked = st.button("ü§ñ Chatbot Assistant",
                                        use_container_width=True,
                                        type="primary" if st.session_state.active_tab == "chatbot" else "secondary")
            if chatbot_clicked:
                st.session_state.active_tab = "chatbot"

        with col2:
            metadata_clicked = st.button("üìä Metadata Analysis",
                                         use_container_width=True,
                                         type="primary" if st.session_state.active_tab == "metadata" else "secondary")
            if metadata_clicked:
                st.session_state.active_tab = "metadata"

        st.markdown("---")

        # Display content based on active tab - instant loading, no data reload
        if st.session_state.active_tab == "chatbot":
            st.header("ü§ñ Chatbot Assistant")
            # Setup chatbot
            setup_chatbot_optimized()
            # Main chatbot interface
            create_chatbot_interface()

        elif st.session_state.active_tab == "metadata":
            # Metadata analysis v·ªõi sub-tabs (Overview v√† View Products)
            create_metadata_tab_interface(df)
    else:
        # Show loading state or error if data not available
        if not st.session_state.app_data_loaded:
            st.info(get_loading_messages()['waiting'])
        else:
            st.error(get_loading_messages()['no_data'])

    # Auto-cleanup old data (t√πy ch·ªçn)
    cleanup_old_data()


# ==================== CLEANUP FUNCTIONS ====================

def cleanup_old_data():
    """Cleanup d·ªØ li·ªáu c≈© ƒë·ªÉ tr√°nh memory leak"""
    # Gi·ªõi h·∫°n chat history
    max_history = 50
    if len(st.session_state.chat_history) > max_history:
        st.session_state.chat_history = st.session_state.chat_history[-max_history:]

    # Reset connection check n·∫øu app kh√¥ng ho·∫°t ƒë·ªông l√¢u
    if st.session_state.last_activity < datetime.now() - timedelta(hours=2):
        st.session_state.last_connection_check = None
        st.session_state.connection_status = None


# ==================== ERROR HANDLING ====================

def handle_app_errors():
    """X·ª≠ l√Ω l·ªói app v·ªõi graceful degradation"""
    try:
        main()
    except Exception as e:
        st.error(f"""
        ‚ö† **ƒê√£ x·∫£y ra l·ªói ·ª©ng d·ª•ng:**

        `{str(e)}`

        **Kh·∫Øc ph·ª•c:**
        1. Refresh trang (F5)
        2. X√≥a cache tr√¨nh duy·ªát
        3. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng
        4. Th·ª≠ l·∫°i v·ªõi method d·ª± ph√≤ng
        """)

        # Reset session state n·∫øu c√≥ l·ªói nghi√™m tr·ªçng
        if st.button("üîÑ Reset ·ª©ng d·ª•ng"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()

        # Option to try fallback method
        if st.button("üõ† Th·ª≠ method d·ª± ph√≤ng"):
            st.session_state.app_data_loaded = False
            st.session_state.loading_method = "fallback"
            st.rerun()


if __name__ == "__main__":
    handle_app_errors()
